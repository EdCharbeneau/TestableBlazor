@code
{
    [Fact(DisplayName = "Initial Alert renders correct markup")]
    public void HelloWorldComponentRendersCorrectly()
    {
        // Arrange

        using var ctx = new TestContext();

        // Act
        var cut = ctx.Render(@<Alert />);
        // Expected HTML rendered
        string expectedMarkup = @"
            <div class=""alert alert-danger"">
                <button type=""button"" class=""close"" aria-label=""Close"">
                    <span aria-hidden=""true"">&times;</span>
                </button>
            </div>";

        // Assert
        // Did it match?
        cut.MarkupMatches(expectedMarkup);
    }

    [Fact(DisplayName = "Alert is dismiss-able")]
    public void AlertHide()
    {
        using var ctx = new TestContext();

        // Arrange
        var cut = ctx.Render(@<Alert />);

        string expectedMarkup = @"
            <button type=""button"" aria-label=""Open Alert"">
                <span aria-hidden=""true"">✉️</span>
            </button>";

        cut.Find("button").Click();
        // Act

        cut.MarkupMatches(expectedMarkup);
    }

    [Fact(DisplayName = "Alert has info theme")]
    public void AlertColor()
    {
        using var ctx = new TestContext();

        // Render the component with IsInfo = true
        var cut = ctx.Render(@<Alert IsInfo="true" />);

        // The expected CSS value
        var expectedCss = "alert alert-info";

        // The actual CSS value
        var actualCss = cut.Find("div").GetAttribute("class");

        // Did it match?
        Assert.Equal(expectedCss, actualCss);
    }

}